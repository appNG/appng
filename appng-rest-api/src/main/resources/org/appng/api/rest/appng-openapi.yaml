openapi: 3.0.1
info:
  version: 1.0.0
  title: appNG REST API
  description: The REST API for appNG
  contact:
    name: appNG developer team
    email: matthias.mueller@appng.org
    url: http://appng.org
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0
security:
  - appNGCookie: []
paths:
  "/service/{site}/{application}/rest/openapi/navigation":
    get:
      tags:
        - appNG
      operationId: getNavigation
      parameters:
        - in: path 
          name: site
          description: the site to call
          required: true
          schema:
            type: string
        - in: path 
          name: application
          description: the application to call
          required: true
          schema:
            type: string
        - in: path 
          name: id
          description: the ID of the page
          required: true
          schema:
            type: string
      responses:
        "200":
          description: datasource response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/navigation"
  "/service/{site}/{application}/rest/openapi/page/{id}":
    get:
      tags:
        - appNG
      operationId: getPage
      parameters:
        - in: path 
          name: site
          description: the site to call
          required: true
          schema:
            type: string
        - in: path 
          name: application
          description: the application to call
          required: true
          schema:
            type: string
        - in: path 
          name: id
          description: the ID of the page
          required: true
          schema:
            type: string
        - in: query
          name: _sect
          description: a list of section IDs to fill
          required: false         
          schema:
            type: array
            items:
              type: string
      responses:
        "200":
          description: datasource response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/pageDefinition"
  "/service/{site}/{application}/rest/openapi/page/{id}/{pageUrlParams}":
    get:
      tags:
        - appNG
      operationId: getPageWithUrlParams
      parameters:
        - in: path 
          name: site
          description: the site to call
          required: true
          schema:
            type: string
        - in: path 
          name: application
          description: the application to call
          required: true
          schema:
            type: string
        - in: path 
          name: id
          description: the ID of the page
          required: true
          schema:
            type: string
        - in: path
          name: pageUrlParams
          description: the URL path to parametrize the page with.
          required: true         
          schema:
            type: string
        - in: query
          name: _sect
          description: a list of section IDs to fill
          required: false         
          schema:
            type: array
            items:
              type: string
      responses:
        "200":
          description: datasource response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/pageDefinition"
  "/service/{site}/{application}/rest/openapi/datasource/{id}":
    get:
      tags:
        - appNG
      description: Returns a datasource by id
      operationId: getDatasource
      parameters:
        - in: path 
          name: site
          description: the site to call
          required: true
          schema:
            type: string
        - in: path 
          name: application
          description: the application to call
          required: true
          schema:
            type: string
        - in: path
          name: id
          description: ID of the datasource
          required: true
          schema:
            type: string
      responses:
        "200":
          description: datasource response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/datasource"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/errorModel"
  "/service/{site}/{application}/rest/openapi/action/{event-id}/{id}":
    get:
      tags:
        - appNG
      description: Returns an action. To be used for initially retrieving the action.
      operationId: getAction
      parameters:
        - in: path 
          name: site
          description: the site to call
          required: true
          schema:
            type: string
        - in: path 
          name: application
          description: the application to call
          required: true
          schema:
            type: string
        - in: path
          name: event-id
          description: event-id of the action
          required: true
          schema:
            type: string
        - in: path
          name: id
          description: ID of the action
          required: true
          schema:
            type: string
      responses:
        "200":
          description: action response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/action"
        "400":
          description: action response, in case an recoverable error occurred
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/action"
        default:
          description: unexpected/unrecoverable error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/errorModel"
    post:
      tags:
        - appNG
      description: Performs an action.
      operationId: performAction
      parameters:
        - in: path 
          name: site
          description: the site to call
          required: true
          schema:
            type: string
        - in: path 
          name: application
          description: the application to call
          required: true
          schema:
            type: string
        - in: path
          name: event-id
          description: event-id of the action
          required: true
          schema:
            type: string
        - in: path
          name: id
          description: ID of the action
          required: true
          schema:
            type: string
      requestBody:
        content: 
          application/json:
            schema:
              $ref: "#/components/schemas/action"
      responses:
        "200":
          description: action response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/action"
        "400":
          description: action response, in case an recoverable error occurred
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/action"
        default:
          description: unexpected/unrecoverable error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/errorModel"
  "/service/{site}/{application}/rest/openapi/action/multipart/{event-id}/{id}":
    post:
      tags:
        - appNG
      description: Performs an action.
      operationId: performActionMultiPart
      parameters:
        - in: path 
          name: site
          description: the site to call
          required: true
          schema:
            type: string
        - in: path 
          name: application
          description: the application to call
          required: true
          schema:
            type: string
        - in: path
          name: event-id
          description: event-id of the action
          required: true
          schema:
            type: string
        - in: path
          name: id
          description: ID of the action
          required: true
          schema:
            type: string
      requestBody:
        content: 
          multipart/form-data:
            schema:
              type: object
              properties:             
                body:
                  $ref: "#/components/schemas/action"
                uploads:
                  type: array
                  items:
                    type: string
                    format: binary
      responses:
        "200":
          description: action response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/action"
        "400":
          description: action response, in case an recoverable error occurred
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/action"
        default:
          description: unexpected/unrecoverable error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/errorModel"
components:
  securitySchemes:
    appNGCookie:
      type: apiKey
      in: cookie
      name: JSESSIONID
  schemas:
    pageDefinition:
      type: object
      required:
        - id
        - _self
      properties:
        _self:
          type: string
          description: The URL of the page
        _userUrl:
          type: string
          description: The URL of the page represented to the user
        user:
          $ref: "#/components/schemas/user"
        id:
          type: string
        messages:
          type: array
          items:
            $ref: "#/components/schemas/message"
        urlPath:
          type: string
          description: the current URL path 
        urlParameters:
          type: array
          items:
            $ref: "#/components/schemas/parameter"
        urlTemplate:
          type: string
          description: A complete template for teh full path this page can handle
        getParameters:
          type: object
          additionalProperties:
            type: string
        sessionParameters:
          type: object
          additionalProperties:
            type: string
        title:
          $ref: "#/components/schemas/label"
        links:
          type: array
          items:
            $ref: "#/components/schemas/link"
        sections:
          type: array
          items:
            $ref: "#/components/schemas/section"
    section:
      type: object
      required:
        - id
      properties:
        id:
          type: string
        title:
          $ref: "#/components/schemas/label"
        hidden:
          type: boolean
          description: Whether the section is hidden or not
        elements:
          type: array
          items:
            $ref: "#/components/schemas/sectionElement"
    sectionElement:
      type: object
      properties:
        title:
          type: string
        collapsed:
          type: boolean
          description: Whether the element is collapsed
        datasource:
          $ref: "#/components/schemas/datasource"
        action:
          $ref: "#/components/schemas/action"
    action:
      type: object
      description: An action, representing an executable operation.
      required:
        - _self
        - id
        - event-id
      properties:
        _self:
          type: string
          description: The URL of the action
        id:
          type: string
          description: The Id of the action.
        event-id:
          type: string
          description: The event-Id of the action.
        parameters:
          type: object
          description: A list of parameters for the action
          additionalProperties:
            type: string
        user:
          $ref: "#/components/schemas/user"
        messages:
          type: array
          description: A list of messages.
          items:
            $ref: "#/components/schemas/message"
        fields:
          type: array
          description: A list of action-fields.
          items:
            $ref: "#/components/schemas/actionField"
        permissions:
          type: array
          description: The permissions for this action.
          items:
            $ref: "#/components/schemas/permission"
        onSuccess:
          type: string
    datasource:
      type: object
      description: A datasource, represented by either a page (of elements) or a single
        element.
      required:
        - id
        - _self
      properties:
        _self:
          type: string
          description: The URL of the datasource
        id:
          type: string
          description: The unique ID of the datasource.
        title:
          type: string
          description: The title of the datasource.
        parameters:
          type: object
          description: The parameters for the datasource.
          additionalProperties:
            type: string
        user:
          $ref: "#/components/schemas/user"
        links:
          type: array
          description: A list of links.
          items:
            $ref: "#/components/schemas/link"
        messages:
          type: array
          description: A list of messages.
          items:
            $ref: "#/components/schemas/message"
        fields:
          type: array
          description: A list of fields.
          items:
            $ref: "#/components/schemas/field"
        filters:
          type: array
          description: A list of filters.
          items:
            $ref: "#/components/schemas/filter"
        filterResetPath:
          type: string
          description: the path to be called to reset the filter
        page:
          $ref: "#/components/schemas/page"
        item:
          $ref: "#/components/schemas/item"
        items:
          type: array
          description: The items of this page.
          items:
            $ref: "#/components/schemas/item"  
        permissions:
          type: array
          description: The permissions for this datasource.
          items:
            $ref: "#/components/schemas/permission"
    errorModel:
      type: object
      description: ""
      required:
        - code
        - message
      properties:
        code:
          type: integer
          format: int32
          description: ""
        message:
          type: string
          description: ""
    field:
      type: object
      description: A field that is part of a datasource.
      required:
        - name
        - fieldType
      properties:
        name:
          type: string
          description: The name for this field.
        label:
          type: string
          description: The label for this field.
        fieldType:
          $ref: "#/components/schemas/fieldType"
        sort:
          $ref: "#/components/schemas/sort"
        format:
          type: string
          description: The format for this field, depending on its type.
        rules:
          type: array
          description: The validation rules that should be applied for this field.
          items:
            $ref: "#/components/schemas/validationRule"
        fields:
          type: object
          description: The child fields of this field.
          additionalProperties:
            $ref: "#/components/schemas/field"
    icon:
      type: object
      description: an icon
      properties:
        name:
          type: string
        label:
          type: string
    fieldValue:
      type: object
      description: The value of a field within a datasource.
      required:
        - name
      properties:
        name:
          type: string
          description: The name of the field.
        value:
          type: object
          description: The value of the field.
        formattedValue:
          type: string
          description: The formatted value of the field.
        icons:
          type: array
          items:
            $ref: "#/components/schemas/icon"
        values:
          type: object
          description: The child values of this fieldValue.
          additionalProperties:
            $ref: "#/components/schemas/fieldValue"
    page:
      type: object
      description: A page that contains paging information an a list of elements.
      required:
        - _first
        - _previous
        - _next
        - _last
        - number
        - size
        - totalPages
        - totalItems
        - isFirst
        - isLast
      properties:
        _first:
          type: string
          description: path to the first page
        _previous:
          type: string
          description: path to the previous page
        _next:
          type: string
          description: path to the next page
        _last:
          type: string
          description: path to the last page
        number:
          type: integer
          format: int32
          description: The 0-based number of the current page.
        size:
          type: integer
          format: int32
          description: The number of items per page.
        totalPages:
          type: integer
          format: int32
          description: The number of total pages.
        totalItems:
          type: integer
          format: int32
          description: The total number of items.
        isFirst:
          type: boolean
          description: If this is the first page.
        isLast:
          type: boolean
          description: If this is the last page.
        pageSizes:  
          type: array
          items:
            $ref: "#/components/schemas/pageSize"
    pageSize:
      type: object
      description: describes the size and path for setting a page size
      properties:
        size:
          type: integer
          format: int32
          description: the number of items to show
        path:
          type: string
          description: the path
    sort:
      type: object
      description: Marks a field as sortable, properties are filled only when sorting has
        been applied.
      properties:
        prio:
          type: integer
          description: The priority for this sort, important when a multi-field sort is
            applied.
        order:
          type: string
          enum:
            - asc
            - desc
          description: The order for this sort (ascending or descending).
        pathAsc:
          type: string
          description: the path to sort ascending
        pathDesc:
          type: string
          description: the path to sort descending
    item:
      type: object
      description: A single item of a page.
      properties:
        fields:
          type: object
          description: The list of field-values of the item.
          additionalProperties:
            $ref: "#/components/schemas/fieldValue"
        selected:
          type: boolean
          description: Whether this item is selected/active.
        links:
          type: array
          description: A list of links.
          items:
            $ref: "#/components/schemas/link"
    link:
      type: object
      description: A link.
      properties:
        id:
          type: string
          description: The ID for this link.
        label:
          type: string
          description: The label for the link.
        target:
          type: string
          description: The target for the link.
        icon:
          type: string
          description: A descriptive name for an icon that should be used for this link.
        default:
          type: boolean
          description: Whether or not this link should be considered as default.
        type:
          type: string
          description: The type of this link.
          enum:
            - intern
            - extern
            - webservice
            - rest
        confirmation:
          type: string
          description: A confirmation message that should be displayed to the user before
            following this link.
    filter:
      type: object
      description: A filter that applies to a datasource.
      properties:
        name:
          type: string
          description: The name of the filter.
        label:
          type: string
          description: The label iof the filter.
        type:
          $ref: "#/components/schemas/optionType"
        options:
          $ref: "#/components/schemas/options"
    options:
      type: object
      description: A set of selectable options
      properties:
        multiple:
          type: boolean
          description: Whether or not this filter allows multiple options to be selected.
        entries:
          type: array
          description: A list of options for this filter.
          items:
            $ref: "#/components/schemas/option"
    option:
      type: object
      description: A single option, used in a filter or an action-field.
      properties:
        value:
          type: string
          description: The value for this option.
        label:
          type: string
          description: The label for this option.
        selected:
          type: boolean
          description: Whether or not this option is selected.
        hits:
          type: integer
          description: Tells how many hits there are for this option.
        options:
          type: array
          description: An option can act as a group and thus can itself own a list of
            options.
          items:
            $ref: "#/components/schemas/option"
    fieldType:
      type: string
      description: The possible types for a field/action-field.
      enum:
        - text
        - longtext
        - richtext
        - password
        - url
        - int
        - long
        - decimal
        - checkbox
        - coordinate
        - date
        - file
        - file_multiple
        - image
        - linkpanel
        - list_checkbox
        - list_radio
        - list_select
        - list_text
        - object
        - list_object
    optionType:
      type: string
      description: The possible types for an option.
      enum:
        - select
        - select_multiple
        - radio
        - checkbox
        - text
        - date
    actionField:
      type: object
      description: A single field as a part of an action.
      properties:
        name:
          type: string
          description: The name of the field.
        value:
          type: object
          description: The value of the field. The concrete type of that object depends on
            the fieldType of this field.
        label:
          type: string
          description: The label for the field.
        fieldType:
          $ref: "#/components/schemas/fieldType"
        readonly:
          type: boolean
          description: Whether or not this field is read-only.
        visible:
          type: boolean
          description: Whether or not this field should be visible.
        format:
          type: string
          description: The format for this field, depending on its type.
        formattedValue:
          type: string
          description: The formatted value for this field.
        options:
          $ref: "#/components/schemas/options"
        rules:
          type: array
          description: The validation rules that should be applied for this field.
          items:
            $ref: "#/components/schemas/validationRule"
        messages:
          type: array
          description: The messages related to this field.
          items:
            $ref: "#/components/schemas/message"
        fields:
          type: array
          description: The child fields of this fieldValue.
          items:
            $ref: "#/components/schemas/actionField"
    validationRule:
      type: object
      description: A validation rule that can be bound to an action-field.
      properties:
        type:
          type: string
          description: The type of the rule.
        message:
          type: string
          description: The error message displayed when the rule isn't fulfilled.
        active:
          type: boolean
          description: Whether or not this rule is active, meaning it should be applied.
        messageKey:
          type: string
          description: The message key for this rule
        options:
          type: object
          description: An array defining the custom parameters for this rule.
          additionalProperties:
            type: string
    user:
      type: object
      description: ""
      properties:
        name:
          type: string
          description: ""
        authenticated:
          type: boolean
        email:
          type: string
          description: The email address of the user.
          example: john@example.com
        locale:
          type: string
          description: The IETF BCP 47 language tag for the user.
          example: en_US
        timezone:
          type: string
          description: The name of the IANA time zone the user is located at.
          example: Europe/Berlin
        decimalSeparator:
          type: string
          description: The charactor used as a decimal separator.
          example: .
        groupingSeparator:
          type: string
          description: The charactor used when grouping numbers.
          example: ","
    message:
      type: object
      description: A textual message with a certain level.
      properties:
        level:
          type: string
          description: The level of the message.
          enum:
            - OK
            - NOTICE
            - INVALID
            - ERROR
        text:
          type: string
          description: The actual message.
        key:
          type: string
          description: A key for this message
    permission:
      type: object
      description: A permission.
      properties:
        mode:
          type: string
          description: The mode
          enum:
            - READ
            - SET
        ref:
          type: string
          description: The reference id of the permission.
        value:
          type: boolean
          description: The value, true if the permission is present.
    parameter:
      type: object
      description: A single parameter.
      required:
        - name
      properties:
        name:
          type: string
          description: The name of the parameter.
        value:
          type: string
          description: The value of the parameter.
    label:
      type: object
      properties:
        value:
          type: string
    navigation:
      type: object
      properties:
        user:
          $ref: "#/components/schemas/user"
        items:
          type: array
          items:
            $ref: "#/components/schemas/navigationItem"
        loginAction:
          $ref: "#/components/schemas/action"
    navigationItem:
      type: object
      properties:
        _self:
          type: string
          description: the API path (type PAGE only)
        name:
          type: string
        default:
          type: boolean
          description: if this is the default page? (type PAGE only)
        path:
          type: string
        active:
          type: boolean
        type:
          type: string
          enum:
            - SITE
            - APP
            - PAGE
        items:
          type: array
          items:
            $ref: "#/components/schemas/navigationItem"
          